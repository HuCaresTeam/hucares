/* 
 * OpenALPR Cloud API
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using OpenAlprApi.Client;
using OpenAlprApi.Model;

namespace OpenAlprApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Send an image for OpenALPR to analyze and provide metadata back The image is sent as base64 encoded bytes. 
        /// </remarks>
        /// <exception cref="OpenAlprApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageBytes">The image file that you wish to analyze encoded in base64 </param>
        /// <param name="secretKey">The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/ </param>
        /// <param name="country">Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  You may use multiple datasets by using commas between the country  codes.  For example, &#39;au,auwide&#39; would analyze using both the  Australian plate styles.  A full list of supported country codes  can be found here https://github.com/openalpr/openalpr/tree/master/runtime_data/config </param>
        /// <param name="recognizeVehicle">If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request  (optional, default to 0)</param>
        /// <param name="state">Corresponds to a US state or EU country code used by OpenALPR pattern  recognition.  For example, using \&quot;md\&quot; matches US plates against the  Maryland plate patterns.  Using \&quot;fr\&quot; matches European plates against  the French plate patterns.  (optional, default to )</param>
        /// <param name="returnImage">If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response  (optional, default to 0)</param>
        /// <param name="topn">The number of results you would like to be returned for plate  candidates and vehicle classifications  (optional, default to 10)</param>
        /// <param name="prewarp">Prewarp configuration is used to calibrate the analyses for the  angle of a particular camera.  More information is available here http://doc.openalpr.com/accuracy_improvements.html#calibration  (optional, default to )</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 RecognizeBytes (string imageBytes, string secretKey, string country, int? recognizeVehicle = null, string state = null, int? returnImage = null, int? topn = null, string prewarp = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Send an image for OpenALPR to analyze and provide metadata back The image is sent as base64 encoded bytes. 
        /// </remarks>
        /// <exception cref="OpenAlprApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageBytes">The image file that you wish to analyze encoded in base64 </param>
        /// <param name="secretKey">The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/ </param>
        /// <param name="country">Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  You may use multiple datasets by using commas between the country  codes.  For example, &#39;au,auwide&#39; would analyze using both the  Australian plate styles.  A full list of supported country codes  can be found here https://github.com/openalpr/openalpr/tree/master/runtime_data/config </param>
        /// <param name="recognizeVehicle">If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request  (optional, default to 0)</param>
        /// <param name="state">Corresponds to a US state or EU country code used by OpenALPR pattern  recognition.  For example, using \&quot;md\&quot; matches US plates against the  Maryland plate patterns.  Using \&quot;fr\&quot; matches European plates against  the French plate patterns.  (optional, default to )</param>
        /// <param name="returnImage">If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response  (optional, default to 0)</param>
        /// <param name="topn">The number of results you would like to be returned for plate  candidates and vehicle classifications  (optional, default to 10)</param>
        /// <param name="prewarp">Prewarp configuration is used to calibrate the analyses for the  angle of a particular camera.  More information is available here http://doc.openalpr.com/accuracy_improvements.html#calibration  (optional, default to )</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> RecognizeBytesWithHttpInfo (string imageBytes, string secretKey, string country, int? recognizeVehicle = null, string state = null, int? returnImage = null, int? topn = null, string prewarp = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Send an image for OpenALPR to analyze and provide metadata back The image is sent as a file using a form data POST 
        /// </remarks>
        /// <exception cref="OpenAlprApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">The image file that you wish to analyze </param>
        /// <param name="secretKey">The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/ </param>
        /// <param name="country">Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  You may use multiple datasets by using commas between the country  codes.  For example, &#39;au,auwide&#39; would analyze using both the  Australian plate styles.  A full list of supported country codes  can be found here https://github.com/openalpr/openalpr/tree/master/runtime_data/config </param>
        /// <param name="recognizeVehicle">If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request  (optional, default to 0)</param>
        /// <param name="state">Corresponds to a US state or EU country code used by OpenALPR pattern  recognition.  For example, using \&quot;md\&quot; matches US plates against the  Maryland plate patterns.  Using \&quot;fr\&quot; matches European plates against  the French plate patterns.  (optional, default to )</param>
        /// <param name="returnImage">If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response  (optional, default to 0)</param>
        /// <param name="topn">The number of results you would like to be returned for plate  candidates and vehicle classifications  (optional, default to 10)</param>
        /// <param name="prewarp">Prewarp configuration is used to calibrate the analyses for the  angle of a particular camera.  More information is available here http://doc.openalpr.com/accuracy_improvements.html#calibration  (optional, default to )</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 RecognizeFile (System.IO.Stream image, string secretKey, string country, int? recognizeVehicle = null, string state = null, int? returnImage = null, int? topn = null, string prewarp = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Send an image for OpenALPR to analyze and provide metadata back The image is sent as a file using a form data POST 
        /// </remarks>
        /// <exception cref="OpenAlprApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">The image file that you wish to analyze </param>
        /// <param name="secretKey">The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/ </param>
        /// <param name="country">Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  You may use multiple datasets by using commas between the country  codes.  For example, &#39;au,auwide&#39; would analyze using both the  Australian plate styles.  A full list of supported country codes  can be found here https://github.com/openalpr/openalpr/tree/master/runtime_data/config </param>
        /// <param name="recognizeVehicle">If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request  (optional, default to 0)</param>
        /// <param name="state">Corresponds to a US state or EU country code used by OpenALPR pattern  recognition.  For example, using \&quot;md\&quot; matches US plates against the  Maryland plate patterns.  Using \&quot;fr\&quot; matches European plates against  the French plate patterns.  (optional, default to )</param>
        /// <param name="returnImage">If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response  (optional, default to 0)</param>
        /// <param name="topn">The number of results you would like to be returned for plate  candidates and vehicle classifications  (optional, default to 10)</param>
        /// <param name="prewarp">Prewarp configuration is used to calibrate the analyses for the  angle of a particular camera.  More information is available here http://doc.openalpr.com/accuracy_improvements.html#calibration  (optional, default to )</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> RecognizeFileWithHttpInfo (System.IO.Stream image, string secretKey, string country, int? recognizeVehicle = null, string state = null, int? returnImage = null, int? topn = null, string prewarp = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Send an image for OpenALPR to analyze and provide metadata back The image is sent as a URL.  The OpenALPR service will download the image  and process it 
        /// </remarks>
        /// <exception cref="OpenAlprApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageUrl">A URL to an image that you wish to analyze </param>
        /// <param name="secretKey">The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/ </param>
        /// <param name="country">Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  You may use multiple datasets by using commas between the country  codes.  For example, &#39;au,auwide&#39; would analyze using both the  Australian plate styles.  A full list of supported country codes  can be found here https://github.com/openalpr/openalpr/tree/master/runtime_data/config </param>
        /// <param name="recognizeVehicle">If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request  (optional, default to 0)</param>
        /// <param name="state">Corresponds to a US state or EU country code used by OpenALPR pattern  recognition.  For example, using \&quot;md\&quot; matches US plates against the  Maryland plate patterns.  Using \&quot;fr\&quot; matches European plates against  the French plate patterns.  (optional, default to )</param>
        /// <param name="returnImage">If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response  (optional, default to 0)</param>
        /// <param name="topn">The number of results you would like to be returned for plate  candidates and vehicle classifications  (optional, default to 10)</param>
        /// <param name="prewarp">Prewarp configuration is used to calibrate the analyses for the  angle of a particular camera.  More information is available here http://doc.openalpr.com/accuracy_improvements.html#calibration  (optional, default to )</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 RecognizeUrl (string imageUrl, string secretKey, string country, int? recognizeVehicle = null, string state = null, int? returnImage = null, int? topn = null, string prewarp = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Send an image for OpenALPR to analyze and provide metadata back The image is sent as a URL.  The OpenALPR service will download the image  and process it 
        /// </remarks>
        /// <exception cref="OpenAlprApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageUrl">A URL to an image that you wish to analyze </param>
        /// <param name="secretKey">The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/ </param>
        /// <param name="country">Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  You may use multiple datasets by using commas between the country  codes.  For example, &#39;au,auwide&#39; would analyze using both the  Australian plate styles.  A full list of supported country codes  can be found here https://github.com/openalpr/openalpr/tree/master/runtime_data/config </param>
        /// <param name="recognizeVehicle">If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request  (optional, default to 0)</param>
        /// <param name="state">Corresponds to a US state or EU country code used by OpenALPR pattern  recognition.  For example, using \&quot;md\&quot; matches US plates against the  Maryland plate patterns.  Using \&quot;fr\&quot; matches European plates against  the French plate patterns.  (optional, default to )</param>
        /// <param name="returnImage">If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response  (optional, default to 0)</param>
        /// <param name="topn">The number of results you would like to be returned for plate  candidates and vehicle classifications  (optional, default to 10)</param>
        /// <param name="prewarp">Prewarp configuration is used to calibrate the analyses for the  angle of a particular camera.  More information is available here http://doc.openalpr.com/accuracy_improvements.html#calibration  (optional, default to )</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> RecognizeUrlWithHttpInfo (string imageUrl, string secretKey, string country, int? recognizeVehicle = null, string state = null, int? returnImage = null, int? topn = null, string prewarp = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Send an image for OpenALPR to analyze and provide metadata back The image is sent as base64 encoded bytes. 
        /// </remarks>
        /// <exception cref="OpenAlprApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageBytes">The image file that you wish to analyze encoded in base64 </param>
        /// <param name="secretKey">The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/ </param>
        /// <param name="country">Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  You may use multiple datasets by using commas between the country  codes.  For example, &#39;au,auwide&#39; would analyze using both the  Australian plate styles.  A full list of supported country codes  can be found here https://github.com/openalpr/openalpr/tree/master/runtime_data/config </param>
        /// <param name="recognizeVehicle">If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request  (optional, default to 0)</param>
        /// <param name="state">Corresponds to a US state or EU country code used by OpenALPR pattern  recognition.  For example, using \&quot;md\&quot; matches US plates against the  Maryland plate patterns.  Using \&quot;fr\&quot; matches European plates against  the French plate patterns.  (optional, default to )</param>
        /// <param name="returnImage">If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response  (optional, default to 0)</param>
        /// <param name="topn">The number of results you would like to be returned for plate  candidates and vehicle classifications  (optional, default to 10)</param>
        /// <param name="prewarp">Prewarp configuration is used to calibrate the analyses for the  angle of a particular camera.  More information is available here http://doc.openalpr.com/accuracy_improvements.html#calibration  (optional, default to )</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> RecognizeBytesAsync (string imageBytes, string secretKey, string country, int? recognizeVehicle = null, string state = null, int? returnImage = null, int? topn = null, string prewarp = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Send an image for OpenALPR to analyze and provide metadata back The image is sent as base64 encoded bytes. 
        /// </remarks>
        /// <exception cref="OpenAlprApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageBytes">The image file that you wish to analyze encoded in base64 </param>
        /// <param name="secretKey">The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/ </param>
        /// <param name="country">Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  You may use multiple datasets by using commas between the country  codes.  For example, &#39;au,auwide&#39; would analyze using both the  Australian plate styles.  A full list of supported country codes  can be found here https://github.com/openalpr/openalpr/tree/master/runtime_data/config </param>
        /// <param name="recognizeVehicle">If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request  (optional, default to 0)</param>
        /// <param name="state">Corresponds to a US state or EU country code used by OpenALPR pattern  recognition.  For example, using \&quot;md\&quot; matches US plates against the  Maryland plate patterns.  Using \&quot;fr\&quot; matches European plates against  the French plate patterns.  (optional, default to )</param>
        /// <param name="returnImage">If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response  (optional, default to 0)</param>
        /// <param name="topn">The number of results you would like to be returned for plate  candidates and vehicle classifications  (optional, default to 10)</param>
        /// <param name="prewarp">Prewarp configuration is used to calibrate the analyses for the  angle of a particular camera.  More information is available here http://doc.openalpr.com/accuracy_improvements.html#calibration  (optional, default to )</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> RecognizeBytesAsyncWithHttpInfo (string imageBytes, string secretKey, string country, int? recognizeVehicle = null, string state = null, int? returnImage = null, int? topn = null, string prewarp = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Send an image for OpenALPR to analyze and provide metadata back The image is sent as a file using a form data POST 
        /// </remarks>
        /// <exception cref="OpenAlprApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">The image file that you wish to analyze </param>
        /// <param name="secretKey">The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/ </param>
        /// <param name="country">Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  You may use multiple datasets by using commas between the country  codes.  For example, &#39;au,auwide&#39; would analyze using both the  Australian plate styles.  A full list of supported country codes  can be found here https://github.com/openalpr/openalpr/tree/master/runtime_data/config </param>
        /// <param name="recognizeVehicle">If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request  (optional, default to 0)</param>
        /// <param name="state">Corresponds to a US state or EU country code used by OpenALPR pattern  recognition.  For example, using \&quot;md\&quot; matches US plates against the  Maryland plate patterns.  Using \&quot;fr\&quot; matches European plates against  the French plate patterns.  (optional, default to )</param>
        /// <param name="returnImage">If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response  (optional, default to 0)</param>
        /// <param name="topn">The number of results you would like to be returned for plate  candidates and vehicle classifications  (optional, default to 10)</param>
        /// <param name="prewarp">Prewarp configuration is used to calibrate the analyses for the  angle of a particular camera.  More information is available here http://doc.openalpr.com/accuracy_improvements.html#calibration  (optional, default to )</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> RecognizeFileAsync (System.IO.Stream image, string secretKey, string country, int? recognizeVehicle = null, string state = null, int? returnImage = null, int? topn = null, string prewarp = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Send an image for OpenALPR to analyze and provide metadata back The image is sent as a file using a form data POST 
        /// </remarks>
        /// <exception cref="OpenAlprApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">The image file that you wish to analyze </param>
        /// <param name="secretKey">The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/ </param>
        /// <param name="country">Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  You may use multiple datasets by using commas between the country  codes.  For example, &#39;au,auwide&#39; would analyze using both the  Australian plate styles.  A full list of supported country codes  can be found here https://github.com/openalpr/openalpr/tree/master/runtime_data/config </param>
        /// <param name="recognizeVehicle">If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request  (optional, default to 0)</param>
        /// <param name="state">Corresponds to a US state or EU country code used by OpenALPR pattern  recognition.  For example, using \&quot;md\&quot; matches US plates against the  Maryland plate patterns.  Using \&quot;fr\&quot; matches European plates against  the French plate patterns.  (optional, default to )</param>
        /// <param name="returnImage">If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response  (optional, default to 0)</param>
        /// <param name="topn">The number of results you would like to be returned for plate  candidates and vehicle classifications  (optional, default to 10)</param>
        /// <param name="prewarp">Prewarp configuration is used to calibrate the analyses for the  angle of a particular camera.  More information is available here http://doc.openalpr.com/accuracy_improvements.html#calibration  (optional, default to )</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> RecognizeFileAsyncWithHttpInfo (System.IO.Stream image, string secretKey, string country, int? recognizeVehicle = null, string state = null, int? returnImage = null, int? topn = null, string prewarp = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Send an image for OpenALPR to analyze and provide metadata back The image is sent as a URL.  The OpenALPR service will download the image  and process it 
        /// </remarks>
        /// <exception cref="OpenAlprApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageUrl">A URL to an image that you wish to analyze </param>
        /// <param name="secretKey">The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/ </param>
        /// <param name="country">Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  You may use multiple datasets by using commas between the country  codes.  For example, &#39;au,auwide&#39; would analyze using both the  Australian plate styles.  A full list of supported country codes  can be found here https://github.com/openalpr/openalpr/tree/master/runtime_data/config </param>
        /// <param name="recognizeVehicle">If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request  (optional, default to 0)</param>
        /// <param name="state">Corresponds to a US state or EU country code used by OpenALPR pattern  recognition.  For example, using \&quot;md\&quot; matches US plates against the  Maryland plate patterns.  Using \&quot;fr\&quot; matches European plates against  the French plate patterns.  (optional, default to )</param>
        /// <param name="returnImage">If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response  (optional, default to 0)</param>
        /// <param name="topn">The number of results you would like to be returned for plate  candidates and vehicle classifications  (optional, default to 10)</param>
        /// <param name="prewarp">Prewarp configuration is used to calibrate the analyses for the  angle of a particular camera.  More information is available here http://doc.openalpr.com/accuracy_improvements.html#calibration  (optional, default to )</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> RecognizeUrlAsync (string imageUrl, string secretKey, string country, int? recognizeVehicle = null, string state = null, int? returnImage = null, int? topn = null, string prewarp = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Send an image for OpenALPR to analyze and provide metadata back The image is sent as a URL.  The OpenALPR service will download the image  and process it 
        /// </remarks>
        /// <exception cref="OpenAlprApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageUrl">A URL to an image that you wish to analyze </param>
        /// <param name="secretKey">The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/ </param>
        /// <param name="country">Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  You may use multiple datasets by using commas between the country  codes.  For example, &#39;au,auwide&#39; would analyze using both the  Australian plate styles.  A full list of supported country codes  can be found here https://github.com/openalpr/openalpr/tree/master/runtime_data/config </param>
        /// <param name="recognizeVehicle">If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request  (optional, default to 0)</param>
        /// <param name="state">Corresponds to a US state or EU country code used by OpenALPR pattern  recognition.  For example, using \&quot;md\&quot; matches US plates against the  Maryland plate patterns.  Using \&quot;fr\&quot; matches European plates against  the French plate patterns.  (optional, default to )</param>
        /// <param name="returnImage">If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response  (optional, default to 0)</param>
        /// <param name="topn">The number of results you would like to be returned for plate  candidates and vehicle classifications  (optional, default to 10)</param>
        /// <param name="prewarp">Prewarp configuration is used to calibrate the analyses for the  angle of a particular camera.  More information is available here http://doc.openalpr.com/accuracy_improvements.html#calibration  (optional, default to )</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> RecognizeUrlAsyncWithHttpInfo (string imageUrl, string secretKey, string country, int? recognizeVehicle = null, string state = null, int? returnImage = null, int? topn = null, string prewarp = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private OpenAlprApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = OpenAlprApi.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = OpenAlprApi.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public OpenAlprApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Send an image for OpenALPR to analyze and provide metadata back The image is sent as base64 encoded bytes. 
        /// </summary>
        /// <exception cref="OpenAlprApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageBytes">The image file that you wish to analyze encoded in base64 </param>
        /// <param name="secretKey">The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/ </param>
        /// <param name="country">Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  You may use multiple datasets by using commas between the country  codes.  For example, &#39;au,auwide&#39; would analyze using both the  Australian plate styles.  A full list of supported country codes  can be found here https://github.com/openalpr/openalpr/tree/master/runtime_data/config </param>
        /// <param name="recognizeVehicle">If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request  (optional, default to 0)</param>
        /// <param name="state">Corresponds to a US state or EU country code used by OpenALPR pattern  recognition.  For example, using \&quot;md\&quot; matches US plates against the  Maryland plate patterns.  Using \&quot;fr\&quot; matches European plates against  the French plate patterns.  (optional, default to )</param>
        /// <param name="returnImage">If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response  (optional, default to 0)</param>
        /// <param name="topn">The number of results you would like to be returned for plate  candidates and vehicle classifications  (optional, default to 10)</param>
        /// <param name="prewarp">Prewarp configuration is used to calibrate the analyses for the  angle of a particular camera.  More information is available here http://doc.openalpr.com/accuracy_improvements.html#calibration  (optional, default to )</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 RecognizeBytes (string imageBytes, string secretKey, string country, int? recognizeVehicle = null, string state = null, int? returnImage = null, int? topn = null, string prewarp = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = RecognizeBytesWithHttpInfo(imageBytes, secretKey, country, recognizeVehicle, state, returnImage, topn, prewarp);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Send an image for OpenALPR to analyze and provide metadata back The image is sent as base64 encoded bytes. 
        /// </summary>
        /// <exception cref="OpenAlprApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageBytes">The image file that you wish to analyze encoded in base64 </param>
        /// <param name="secretKey">The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/ </param>
        /// <param name="country">Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  You may use multiple datasets by using commas between the country  codes.  For example, &#39;au,auwide&#39; would analyze using both the  Australian plate styles.  A full list of supported country codes  can be found here https://github.com/openalpr/openalpr/tree/master/runtime_data/config </param>
        /// <param name="recognizeVehicle">If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request  (optional, default to 0)</param>
        /// <param name="state">Corresponds to a US state or EU country code used by OpenALPR pattern  recognition.  For example, using \&quot;md\&quot; matches US plates against the  Maryland plate patterns.  Using \&quot;fr\&quot; matches European plates against  the French plate patterns.  (optional, default to )</param>
        /// <param name="returnImage">If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response  (optional, default to 0)</param>
        /// <param name="topn">The number of results you would like to be returned for plate  candidates and vehicle classifications  (optional, default to 10)</param>
        /// <param name="prewarp">Prewarp configuration is used to calibrate the analyses for the  angle of a particular camera.  More information is available here http://doc.openalpr.com/accuracy_improvements.html#calibration  (optional, default to )</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > RecognizeBytesWithHttpInfo (string imageBytes, string secretKey, string country, int? recognizeVehicle = null, string state = null, int? returnImage = null, int? topn = null, string prewarp = null)
        {
            // verify the required parameter 'imageBytes' is set
            if (imageBytes == null)
                throw new ApiException(400, "Missing required parameter 'imageBytes' when calling DefaultApi->RecognizeBytes");
            // verify the required parameter 'secretKey' is set
            if (secretKey == null)
                throw new ApiException(400, "Missing required parameter 'secretKey' when calling DefaultApi->RecognizeBytes");
            // verify the required parameter 'country' is set
            if (country == null)
                throw new ApiException(400, "Missing required parameter 'country' when calling DefaultApi->RecognizeBytes");

            var localVarPath = "/recognize_bytes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (secretKey != null) localVarQueryParams.Add("secret_key", Configuration.ApiClient.ParameterToString(secretKey)); // query parameter
            if (recognizeVehicle != null) localVarQueryParams.Add("recognize_vehicle", Configuration.ApiClient.ParameterToString(recognizeVehicle)); // query parameter
            if (country != null) localVarQueryParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // query parameter
            if (state != null) localVarQueryParams.Add("state", Configuration.ApiClient.ParameterToString(state)); // query parameter
            if (returnImage != null) localVarQueryParams.Add("return_image", Configuration.ApiClient.ParameterToString(returnImage)); // query parameter
            if (topn != null) localVarQueryParams.Add("topn", Configuration.ApiClient.ParameterToString(topn)); // query parameter
            if (prewarp != null) localVarQueryParams.Add("prewarp", Configuration.ApiClient.ParameterToString(prewarp)); // query parameter
            if (imageBytes != null && imageBytes.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(imageBytes); // http body (model) parameter
            }
            else
            {
                localVarPostBody = imageBytes; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecognizeBytes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
            
        }

        /// <summary>
        ///  Send an image for OpenALPR to analyze and provide metadata back The image is sent as base64 encoded bytes. 
        /// </summary>
        /// <exception cref="OpenAlprApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageBytes">The image file that you wish to analyze encoded in base64 </param>
        /// <param name="secretKey">The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/ </param>
        /// <param name="country">Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  You may use multiple datasets by using commas between the country  codes.  For example, &#39;au,auwide&#39; would analyze using both the  Australian plate styles.  A full list of supported country codes  can be found here https://github.com/openalpr/openalpr/tree/master/runtime_data/config </param>
        /// <param name="recognizeVehicle">If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request  (optional, default to 0)</param>
        /// <param name="state">Corresponds to a US state or EU country code used by OpenALPR pattern  recognition.  For example, using \&quot;md\&quot; matches US plates against the  Maryland plate patterns.  Using \&quot;fr\&quot; matches European plates against  the French plate patterns.  (optional, default to )</param>
        /// <param name="returnImage">If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response  (optional, default to 0)</param>
        /// <param name="topn">The number of results you would like to be returned for plate  candidates and vehicle classifications  (optional, default to 10)</param>
        /// <param name="prewarp">Prewarp configuration is used to calibrate the analyses for the  angle of a particular camera.  More information is available here http://doc.openalpr.com/accuracy_improvements.html#calibration  (optional, default to )</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> RecognizeBytesAsync (string imageBytes, string secretKey, string country, int? recognizeVehicle = null, string state = null, int? returnImage = null, int? topn = null, string prewarp = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = await RecognizeBytesAsyncWithHttpInfo(imageBytes, secretKey, country, recognizeVehicle, state, returnImage, topn, prewarp);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Send an image for OpenALPR to analyze and provide metadata back The image is sent as base64 encoded bytes. 
        /// </summary>
        /// <exception cref="OpenAlprApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageBytes">The image file that you wish to analyze encoded in base64 </param>
        /// <param name="secretKey">The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/ </param>
        /// <param name="country">Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  You may use multiple datasets by using commas between the country  codes.  For example, &#39;au,auwide&#39; would analyze using both the  Australian plate styles.  A full list of supported country codes  can be found here https://github.com/openalpr/openalpr/tree/master/runtime_data/config </param>
        /// <param name="recognizeVehicle">If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request  (optional, default to 0)</param>
        /// <param name="state">Corresponds to a US state or EU country code used by OpenALPR pattern  recognition.  For example, using \&quot;md\&quot; matches US plates against the  Maryland plate patterns.  Using \&quot;fr\&quot; matches European plates against  the French plate patterns.  (optional, default to )</param>
        /// <param name="returnImage">If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response  (optional, default to 0)</param>
        /// <param name="topn">The number of results you would like to be returned for plate  candidates and vehicle classifications  (optional, default to 10)</param>
        /// <param name="prewarp">Prewarp configuration is used to calibrate the analyses for the  angle of a particular camera.  More information is available here http://doc.openalpr.com/accuracy_improvements.html#calibration  (optional, default to )</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> RecognizeBytesAsyncWithHttpInfo (string imageBytes, string secretKey, string country, int? recognizeVehicle = null, string state = null, int? returnImage = null, int? topn = null, string prewarp = null)
        {
            // verify the required parameter 'imageBytes' is set
            if (imageBytes == null)
                throw new ApiException(400, "Missing required parameter 'imageBytes' when calling DefaultApi->RecognizeBytes");
            // verify the required parameter 'secretKey' is set
            if (secretKey == null)
                throw new ApiException(400, "Missing required parameter 'secretKey' when calling DefaultApi->RecognizeBytes");
            // verify the required parameter 'country' is set
            if (country == null)
                throw new ApiException(400, "Missing required parameter 'country' when calling DefaultApi->RecognizeBytes");

            var localVarPath = "/recognize_bytes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (secretKey != null) localVarQueryParams.Add("secret_key", Configuration.ApiClient.ParameterToString(secretKey)); // query parameter
            if (recognizeVehicle != null) localVarQueryParams.Add("recognize_vehicle", Configuration.ApiClient.ParameterToString(recognizeVehicle)); // query parameter
            if (country != null) localVarQueryParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // query parameter
            if (state != null) localVarQueryParams.Add("state", Configuration.ApiClient.ParameterToString(state)); // query parameter
            if (returnImage != null) localVarQueryParams.Add("return_image", Configuration.ApiClient.ParameterToString(returnImage)); // query parameter
            if (topn != null) localVarQueryParams.Add("topn", Configuration.ApiClient.ParameterToString(topn)); // query parameter
            if (prewarp != null) localVarQueryParams.Add("prewarp", Configuration.ApiClient.ParameterToString(prewarp)); // query parameter
            if (imageBytes != null && imageBytes.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(imageBytes); // http body (model) parameter
            }
            else
            {
                localVarPostBody = imageBytes; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecognizeBytes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
            
        }

        /// <summary>
        ///  Send an image for OpenALPR to analyze and provide metadata back The image is sent as a file using a form data POST 
        /// </summary>
        /// <exception cref="OpenAlprApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">The image file that you wish to analyze </param>
        /// <param name="secretKey">The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/ </param>
        /// <param name="country">Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  You may use multiple datasets by using commas between the country  codes.  For example, &#39;au,auwide&#39; would analyze using both the  Australian plate styles.  A full list of supported country codes  can be found here https://github.com/openalpr/openalpr/tree/master/runtime_data/config </param>
        /// <param name="recognizeVehicle">If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request  (optional, default to 0)</param>
        /// <param name="state">Corresponds to a US state or EU country code used by OpenALPR pattern  recognition.  For example, using \&quot;md\&quot; matches US plates against the  Maryland plate patterns.  Using \&quot;fr\&quot; matches European plates against  the French plate patterns.  (optional, default to )</param>
        /// <param name="returnImage">If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response  (optional, default to 0)</param>
        /// <param name="topn">The number of results you would like to be returned for plate  candidates and vehicle classifications  (optional, default to 10)</param>
        /// <param name="prewarp">Prewarp configuration is used to calibrate the analyses for the  angle of a particular camera.  More information is available here http://doc.openalpr.com/accuracy_improvements.html#calibration  (optional, default to )</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 RecognizeFile (System.IO.Stream image, string secretKey, string country, int? recognizeVehicle = null, string state = null, int? returnImage = null, int? topn = null, string prewarp = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = RecognizeFileWithHttpInfo(image, secretKey, country, recognizeVehicle, state, returnImage, topn, prewarp);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Send an image for OpenALPR to analyze and provide metadata back The image is sent as a file using a form data POST 
        /// </summary>
        /// <exception cref="OpenAlprApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">The image file that you wish to analyze </param>
        /// <param name="secretKey">The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/ </param>
        /// <param name="country">Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  You may use multiple datasets by using commas between the country  codes.  For example, &#39;au,auwide&#39; would analyze using both the  Australian plate styles.  A full list of supported country codes  can be found here https://github.com/openalpr/openalpr/tree/master/runtime_data/config </param>
        /// <param name="recognizeVehicle">If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request  (optional, default to 0)</param>
        /// <param name="state">Corresponds to a US state or EU country code used by OpenALPR pattern  recognition.  For example, using \&quot;md\&quot; matches US plates against the  Maryland plate patterns.  Using \&quot;fr\&quot; matches European plates against  the French plate patterns.  (optional, default to )</param>
        /// <param name="returnImage">If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response  (optional, default to 0)</param>
        /// <param name="topn">The number of results you would like to be returned for plate  candidates and vehicle classifications  (optional, default to 10)</param>
        /// <param name="prewarp">Prewarp configuration is used to calibrate the analyses for the  angle of a particular camera.  More information is available here http://doc.openalpr.com/accuracy_improvements.html#calibration  (optional, default to )</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > RecognizeFileWithHttpInfo (System.IO.Stream image, string secretKey, string country, int? recognizeVehicle = null, string state = null, int? returnImage = null, int? topn = null, string prewarp = null)
        {
            // verify the required parameter 'image' is set
            if (image == null)
                throw new ApiException(400, "Missing required parameter 'image' when calling DefaultApi->RecognizeFile");
            // verify the required parameter 'secretKey' is set
            if (secretKey == null)
                throw new ApiException(400, "Missing required parameter 'secretKey' when calling DefaultApi->RecognizeFile");
            // verify the required parameter 'country' is set
            if (country == null)
                throw new ApiException(400, "Missing required parameter 'country' when calling DefaultApi->RecognizeFile");

            var localVarPath = "/recognize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (secretKey != null) localVarQueryParams.Add("secret_key", Configuration.ApiClient.ParameterToString(secretKey)); // query parameter
            if (recognizeVehicle != null) localVarQueryParams.Add("recognize_vehicle", Configuration.ApiClient.ParameterToString(recognizeVehicle)); // query parameter
            if (country != null) localVarQueryParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // query parameter
            if (state != null) localVarQueryParams.Add("state", Configuration.ApiClient.ParameterToString(state)); // query parameter
            if (returnImage != null) localVarQueryParams.Add("return_image", Configuration.ApiClient.ParameterToString(returnImage)); // query parameter
            if (topn != null) localVarQueryParams.Add("topn", Configuration.ApiClient.ParameterToString(topn)); // query parameter
            if (prewarp != null) localVarQueryParams.Add("prewarp", Configuration.ApiClient.ParameterToString(prewarp)); // query parameter
            if (image != null) localVarFileParams.Add("image", Configuration.ApiClient.ParameterToFile("image", image));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecognizeFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
            
        }

        /// <summary>
        ///  Send an image for OpenALPR to analyze and provide metadata back The image is sent as a file using a form data POST 
        /// </summary>
        /// <exception cref="OpenAlprApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">The image file that you wish to analyze </param>
        /// <param name="secretKey">The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/ </param>
        /// <param name="country">Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  You may use multiple datasets by using commas between the country  codes.  For example, &#39;au,auwide&#39; would analyze using both the  Australian plate styles.  A full list of supported country codes  can be found here https://github.com/openalpr/openalpr/tree/master/runtime_data/config </param>
        /// <param name="recognizeVehicle">If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request  (optional, default to 0)</param>
        /// <param name="state">Corresponds to a US state or EU country code used by OpenALPR pattern  recognition.  For example, using \&quot;md\&quot; matches US plates against the  Maryland plate patterns.  Using \&quot;fr\&quot; matches European plates against  the French plate patterns.  (optional, default to )</param>
        /// <param name="returnImage">If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response  (optional, default to 0)</param>
        /// <param name="topn">The number of results you would like to be returned for plate  candidates and vehicle classifications  (optional, default to 10)</param>
        /// <param name="prewarp">Prewarp configuration is used to calibrate the analyses for the  angle of a particular camera.  More information is available here http://doc.openalpr.com/accuracy_improvements.html#calibration  (optional, default to )</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> RecognizeFileAsync (System.IO.Stream image, string secretKey, string country, int? recognizeVehicle = null, string state = null, int? returnImage = null, int? topn = null, string prewarp = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = await RecognizeFileAsyncWithHttpInfo(image, secretKey, country, recognizeVehicle, state, returnImage, topn, prewarp);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Send an image for OpenALPR to analyze and provide metadata back The image is sent as a file using a form data POST 
        /// </summary>
        /// <exception cref="OpenAlprApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">The image file that you wish to analyze </param>
        /// <param name="secretKey">The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/ </param>
        /// <param name="country">Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  You may use multiple datasets by using commas between the country  codes.  For example, &#39;au,auwide&#39; would analyze using both the  Australian plate styles.  A full list of supported country codes  can be found here https://github.com/openalpr/openalpr/tree/master/runtime_data/config </param>
        /// <param name="recognizeVehicle">If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request  (optional, default to 0)</param>
        /// <param name="state">Corresponds to a US state or EU country code used by OpenALPR pattern  recognition.  For example, using \&quot;md\&quot; matches US plates against the  Maryland plate patterns.  Using \&quot;fr\&quot; matches European plates against  the French plate patterns.  (optional, default to )</param>
        /// <param name="returnImage">If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response  (optional, default to 0)</param>
        /// <param name="topn">The number of results you would like to be returned for plate  candidates and vehicle classifications  (optional, default to 10)</param>
        /// <param name="prewarp">Prewarp configuration is used to calibrate the analyses for the  angle of a particular camera.  More information is available here http://doc.openalpr.com/accuracy_improvements.html#calibration  (optional, default to )</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> RecognizeFileAsyncWithHttpInfo (System.IO.Stream image, string secretKey, string country, int? recognizeVehicle = null, string state = null, int? returnImage = null, int? topn = null, string prewarp = null)
        {
            // verify the required parameter 'image' is set
            if (image == null)
                throw new ApiException(400, "Missing required parameter 'image' when calling DefaultApi->RecognizeFile");
            // verify the required parameter 'secretKey' is set
            if (secretKey == null)
                throw new ApiException(400, "Missing required parameter 'secretKey' when calling DefaultApi->RecognizeFile");
            // verify the required parameter 'country' is set
            if (country == null)
                throw new ApiException(400, "Missing required parameter 'country' when calling DefaultApi->RecognizeFile");

            var localVarPath = "/recognize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (secretKey != null) localVarQueryParams.Add("secret_key", Configuration.ApiClient.ParameterToString(secretKey)); // query parameter
            if (recognizeVehicle != null) localVarQueryParams.Add("recognize_vehicle", Configuration.ApiClient.ParameterToString(recognizeVehicle)); // query parameter
            if (country != null) localVarQueryParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // query parameter
            if (state != null) localVarQueryParams.Add("state", Configuration.ApiClient.ParameterToString(state)); // query parameter
            if (returnImage != null) localVarQueryParams.Add("return_image", Configuration.ApiClient.ParameterToString(returnImage)); // query parameter
            if (topn != null) localVarQueryParams.Add("topn", Configuration.ApiClient.ParameterToString(topn)); // query parameter
            if (prewarp != null) localVarQueryParams.Add("prewarp", Configuration.ApiClient.ParameterToString(prewarp)); // query parameter
            if (image != null) localVarFileParams.Add("image", Configuration.ApiClient.ParameterToFile("image", image));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecognizeFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
            
        }

        /// <summary>
        ///  Send an image for OpenALPR to analyze and provide metadata back The image is sent as a URL.  The OpenALPR service will download the image  and process it 
        /// </summary>
        /// <exception cref="OpenAlprApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageUrl">A URL to an image that you wish to analyze </param>
        /// <param name="secretKey">The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/ </param>
        /// <param name="country">Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  You may use multiple datasets by using commas between the country  codes.  For example, &#39;au,auwide&#39; would analyze using both the  Australian plate styles.  A full list of supported country codes  can be found here https://github.com/openalpr/openalpr/tree/master/runtime_data/config </param>
        /// <param name="recognizeVehicle">If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request  (optional, default to 0)</param>
        /// <param name="state">Corresponds to a US state or EU country code used by OpenALPR pattern  recognition.  For example, using \&quot;md\&quot; matches US plates against the  Maryland plate patterns.  Using \&quot;fr\&quot; matches European plates against  the French plate patterns.  (optional, default to )</param>
        /// <param name="returnImage">If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response  (optional, default to 0)</param>
        /// <param name="topn">The number of results you would like to be returned for plate  candidates and vehicle classifications  (optional, default to 10)</param>
        /// <param name="prewarp">Prewarp configuration is used to calibrate the analyses for the  angle of a particular camera.  More information is available here http://doc.openalpr.com/accuracy_improvements.html#calibration  (optional, default to )</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 RecognizeUrl (string imageUrl, string secretKey, string country, int? recognizeVehicle = null, string state = null, int? returnImage = null, int? topn = null, string prewarp = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = RecognizeUrlWithHttpInfo(imageUrl, secretKey, country, recognizeVehicle, state, returnImage, topn, prewarp);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Send an image for OpenALPR to analyze and provide metadata back The image is sent as a URL.  The OpenALPR service will download the image  and process it 
        /// </summary>
        /// <exception cref="OpenAlprApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageUrl">A URL to an image that you wish to analyze </param>
        /// <param name="secretKey">The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/ </param>
        /// <param name="country">Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  You may use multiple datasets by using commas between the country  codes.  For example, &#39;au,auwide&#39; would analyze using both the  Australian plate styles.  A full list of supported country codes  can be found here https://github.com/openalpr/openalpr/tree/master/runtime_data/config </param>
        /// <param name="recognizeVehicle">If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request  (optional, default to 0)</param>
        /// <param name="state">Corresponds to a US state or EU country code used by OpenALPR pattern  recognition.  For example, using \&quot;md\&quot; matches US plates against the  Maryland plate patterns.  Using \&quot;fr\&quot; matches European plates against  the French plate patterns.  (optional, default to )</param>
        /// <param name="returnImage">If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response  (optional, default to 0)</param>
        /// <param name="topn">The number of results you would like to be returned for plate  candidates and vehicle classifications  (optional, default to 10)</param>
        /// <param name="prewarp">Prewarp configuration is used to calibrate the analyses for the  angle of a particular camera.  More information is available here http://doc.openalpr.com/accuracy_improvements.html#calibration  (optional, default to )</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > RecognizeUrlWithHttpInfo (string imageUrl, string secretKey, string country, int? recognizeVehicle = null, string state = null, int? returnImage = null, int? topn = null, string prewarp = null)
        {
            // verify the required parameter 'imageUrl' is set
            if (imageUrl == null)
                throw new ApiException(400, "Missing required parameter 'imageUrl' when calling DefaultApi->RecognizeUrl");
            // verify the required parameter 'secretKey' is set
            if (secretKey == null)
                throw new ApiException(400, "Missing required parameter 'secretKey' when calling DefaultApi->RecognizeUrl");
            // verify the required parameter 'country' is set
            if (country == null)
                throw new ApiException(400, "Missing required parameter 'country' when calling DefaultApi->RecognizeUrl");

            var localVarPath = "/recognize_url";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (imageUrl != null) localVarQueryParams.Add("image_url", Configuration.ApiClient.ParameterToString(imageUrl)); // query parameter
            if (secretKey != null) localVarQueryParams.Add("secret_key", Configuration.ApiClient.ParameterToString(secretKey)); // query parameter
            if (recognizeVehicle != null) localVarQueryParams.Add("recognize_vehicle", Configuration.ApiClient.ParameterToString(recognizeVehicle)); // query parameter
            if (country != null) localVarQueryParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // query parameter
            if (state != null) localVarQueryParams.Add("state", Configuration.ApiClient.ParameterToString(state)); // query parameter
            if (returnImage != null) localVarQueryParams.Add("return_image", Configuration.ApiClient.ParameterToString(returnImage)); // query parameter
            if (topn != null) localVarQueryParams.Add("topn", Configuration.ApiClient.ParameterToString(topn)); // query parameter
            if (prewarp != null) localVarQueryParams.Add("prewarp", Configuration.ApiClient.ParameterToString(prewarp)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecognizeUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
            
        }

        /// <summary>
        ///  Send an image for OpenALPR to analyze and provide metadata back The image is sent as a URL.  The OpenALPR service will download the image  and process it 
        /// </summary>
        /// <exception cref="OpenAlprApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageUrl">A URL to an image that you wish to analyze </param>
        /// <param name="secretKey">The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/ </param>
        /// <param name="country">Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  You may use multiple datasets by using commas between the country  codes.  For example, &#39;au,auwide&#39; would analyze using both the  Australian plate styles.  A full list of supported country codes  can be found here https://github.com/openalpr/openalpr/tree/master/runtime_data/config </param>
        /// <param name="recognizeVehicle">If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request  (optional, default to 0)</param>
        /// <param name="state">Corresponds to a US state or EU country code used by OpenALPR pattern  recognition.  For example, using \&quot;md\&quot; matches US plates against the  Maryland plate patterns.  Using \&quot;fr\&quot; matches European plates against  the French plate patterns.  (optional, default to )</param>
        /// <param name="returnImage">If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response  (optional, default to 0)</param>
        /// <param name="topn">The number of results you would like to be returned for plate  candidates and vehicle classifications  (optional, default to 10)</param>
        /// <param name="prewarp">Prewarp configuration is used to calibrate the analyses for the  angle of a particular camera.  More information is available here http://doc.openalpr.com/accuracy_improvements.html#calibration  (optional, default to )</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> RecognizeUrlAsync (string imageUrl, string secretKey, string country, int? recognizeVehicle = null, string state = null, int? returnImage = null, int? topn = null, string prewarp = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = await RecognizeUrlAsyncWithHttpInfo(imageUrl, secretKey, country, recognizeVehicle, state, returnImage, topn, prewarp);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Send an image for OpenALPR to analyze and provide metadata back The image is sent as a URL.  The OpenALPR service will download the image  and process it 
        /// </summary>
        /// <exception cref="OpenAlprApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageUrl">A URL to an image that you wish to analyze </param>
        /// <param name="secretKey">The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/ </param>
        /// <param name="country">Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  You may use multiple datasets by using commas between the country  codes.  For example, &#39;au,auwide&#39; would analyze using both the  Australian plate styles.  A full list of supported country codes  can be found here https://github.com/openalpr/openalpr/tree/master/runtime_data/config </param>
        /// <param name="recognizeVehicle">If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request  (optional, default to 0)</param>
        /// <param name="state">Corresponds to a US state or EU country code used by OpenALPR pattern  recognition.  For example, using \&quot;md\&quot; matches US plates against the  Maryland plate patterns.  Using \&quot;fr\&quot; matches European plates against  the French plate patterns.  (optional, default to )</param>
        /// <param name="returnImage">If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response  (optional, default to 0)</param>
        /// <param name="topn">The number of results you would like to be returned for plate  candidates and vehicle classifications  (optional, default to 10)</param>
        /// <param name="prewarp">Prewarp configuration is used to calibrate the analyses for the  angle of a particular camera.  More information is available here http://doc.openalpr.com/accuracy_improvements.html#calibration  (optional, default to )</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> RecognizeUrlAsyncWithHttpInfo (string imageUrl, string secretKey, string country, int? recognizeVehicle = null, string state = null, int? returnImage = null, int? topn = null, string prewarp = null)
        {
            // verify the required parameter 'imageUrl' is set
            if (imageUrl == null)
                throw new ApiException(400, "Missing required parameter 'imageUrl' when calling DefaultApi->RecognizeUrl");
            // verify the required parameter 'secretKey' is set
            if (secretKey == null)
                throw new ApiException(400, "Missing required parameter 'secretKey' when calling DefaultApi->RecognizeUrl");
            // verify the required parameter 'country' is set
            if (country == null)
                throw new ApiException(400, "Missing required parameter 'country' when calling DefaultApi->RecognizeUrl");

            var localVarPath = "/recognize_url";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (imageUrl != null) localVarQueryParams.Add("image_url", Configuration.ApiClient.ParameterToString(imageUrl)); // query parameter
            if (secretKey != null) localVarQueryParams.Add("secret_key", Configuration.ApiClient.ParameterToString(secretKey)); // query parameter
            if (recognizeVehicle != null) localVarQueryParams.Add("recognize_vehicle", Configuration.ApiClient.ParameterToString(recognizeVehicle)); // query parameter
            if (country != null) localVarQueryParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // query parameter
            if (state != null) localVarQueryParams.Add("state", Configuration.ApiClient.ParameterToString(state)); // query parameter
            if (returnImage != null) localVarQueryParams.Add("return_image", Configuration.ApiClient.ParameterToString(returnImage)); // query parameter
            if (topn != null) localVarQueryParams.Add("topn", Configuration.ApiClient.ParameterToString(topn)); // query parameter
            if (prewarp != null) localVarQueryParams.Add("prewarp", Configuration.ApiClient.ParameterToString(prewarp)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecognizeUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
            
        }

    }
}
