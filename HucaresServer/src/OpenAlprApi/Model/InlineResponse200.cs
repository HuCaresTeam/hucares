/* 
 * OpenALPR Cloud API
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace OpenAlprApi.Model
{
    /// <summary>
    /// InlineResponse200
    /// </summary>
    [DataContract]
    public partial class InlineResponse200 :  IEquatable<InlineResponse200>
    {
        /// <summary>
        /// Specifies the type of data in this response
        /// </summary>
        /// <value>Specifies the type of data in this response</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DataTypeEnum
        {
            
            /// <summary>
            /// Enum Alprresults for "alpr_results"
            /// </summary>
            [EnumMember(Value = "alpr_results")]
            Alprresults,
            
            /// <summary>
            /// Enum Alprgroup for "alpr_group"
            /// </summary>
            [EnumMember(Value = "alpr_group")]
            Alprgroup,
            
            /// <summary>
            /// Enum Heartbeat for "heartbeat"
            /// </summary>
            [EnumMember(Value = "heartbeat")]
            Heartbeat
        }

        /// <summary>
        /// Specifies the type of data in this response
        /// </summary>
        /// <value>Specifies the type of data in this response</value>
        [DataMember(Name="data_type", EmitDefaultValue=false)]
        public DataTypeEnum? DataType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse200" /> class.
        /// </summary>
        /// <param name="ProcessingTime">ProcessingTime.</param>
        /// <param name="ImgWidth">Width of the uploaded image in pixels.</param>
        /// <param name="ImgHeight">Height of the input image in pixels.</param>
        /// <param name="CreditCost">The number of API credits that were used to process this image.</param>
        /// <param name="CreditsMonthlyUsed">The number of API credits used this month.</param>
        /// <param name="CreditsMonthlyTotal">The maximum number of API credits available this month according to your plan.</param>
        /// <param name="Results">Results.</param>
        /// <param name="RegionsOfInterest">Describes the areas analyzed in the input image.</param>
        /// <param name="EpochTime">Epoch time that the image was processed in milliseconds.</param>
        /// <param name="Version">API format version.</param>
        /// <param name="DataType">Specifies the type of data in this response.</param>
        public InlineResponse200(InlineResponse200ProcessingTime ProcessingTime = null, int? ImgWidth = null, int? ImgHeight = null, int? CreditCost = null, int? CreditsMonthlyUsed = null, int? CreditsMonthlyTotal = null, List<PlateDetails> Results = null, List<RegionOfInterest> RegionsOfInterest = null, decimal? EpochTime = null, int? Version = null, DataTypeEnum? DataType = null)
        {
            this.ProcessingTime = ProcessingTime;
            this.ImgWidth = ImgWidth;
            this.ImgHeight = ImgHeight;
            this.CreditCost = CreditCost;
            this.CreditsMonthlyUsed = CreditsMonthlyUsed;
            this.CreditsMonthlyTotal = CreditsMonthlyTotal;
            this.Results = Results;
            this.RegionsOfInterest = RegionsOfInterest;
            this.EpochTime = EpochTime;
            this.Version = Version;
            this.DataType = DataType;
        }
        
        /// <summary>
        /// Gets or Sets ProcessingTime
        /// </summary>
        [DataMember(Name="processing_time", EmitDefaultValue=false)]
        public InlineResponse200ProcessingTime ProcessingTime { get; set; }
        /// <summary>
        /// Width of the uploaded image in pixels
        /// </summary>
        /// <value>Width of the uploaded image in pixels</value>
        [DataMember(Name="img_width", EmitDefaultValue=false)]
        public int? ImgWidth { get; set; }
        /// <summary>
        /// Height of the input image in pixels
        /// </summary>
        /// <value>Height of the input image in pixels</value>
        [DataMember(Name="img_height", EmitDefaultValue=false)]
        public int? ImgHeight { get; set; }
        /// <summary>
        /// The number of API credits that were used to process this image
        /// </summary>
        /// <value>The number of API credits that were used to process this image</value>
        [DataMember(Name="credit_cost", EmitDefaultValue=false)]
        public int? CreditCost { get; set; }
        /// <summary>
        /// The number of API credits used this month
        /// </summary>
        /// <value>The number of API credits used this month</value>
        [DataMember(Name="credits_monthly_used", EmitDefaultValue=false)]
        public int? CreditsMonthlyUsed { get; set; }
        /// <summary>
        /// The maximum number of API credits available this month according to your plan
        /// </summary>
        /// <value>The maximum number of API credits available this month according to your plan</value>
        [DataMember(Name="credits_monthly_total", EmitDefaultValue=false)]
        public int? CreditsMonthlyTotal { get; set; }
        /// <summary>
        /// Gets or Sets Results
        /// </summary>
        [DataMember(Name="results", EmitDefaultValue=false)]
        public List<PlateDetails> Results { get; set; }
        /// <summary>
        /// Describes the areas analyzed in the input image
        /// </summary>
        /// <value>Describes the areas analyzed in the input image</value>
        [DataMember(Name="regions_of_interest", EmitDefaultValue=false)]
        public List<RegionOfInterest> RegionsOfInterest { get; set; }
        /// <summary>
        /// Epoch time that the image was processed in milliseconds
        /// </summary>
        /// <value>Epoch time that the image was processed in milliseconds</value>
        [DataMember(Name="epoch_time", EmitDefaultValue=false)]
        public decimal? EpochTime { get; set; }
        /// <summary>
        /// API format version
        /// </summary>
        /// <value>API format version</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public int? Version { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse200 {\n");
            sb.Append("  ProcessingTime: ").Append(ProcessingTime).Append("\n");
            sb.Append("  ImgWidth: ").Append(ImgWidth).Append("\n");
            sb.Append("  ImgHeight: ").Append(ImgHeight).Append("\n");
            sb.Append("  CreditCost: ").Append(CreditCost).Append("\n");
            sb.Append("  CreditsMonthlyUsed: ").Append(CreditsMonthlyUsed).Append("\n");
            sb.Append("  CreditsMonthlyTotal: ").Append(CreditsMonthlyTotal).Append("\n");
            sb.Append("  Results: ").Append(Results).Append("\n");
            sb.Append("  RegionsOfInterest: ").Append(RegionsOfInterest).Append("\n");
            sb.Append("  EpochTime: ").Append(EpochTime).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  DataType: ").Append(DataType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as InlineResponse200);
        }

        /// <summary>
        /// Returns true if InlineResponse200 instances are equal
        /// </summary>
        /// <param name="other">Instance of InlineResponse200 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse200 other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ProcessingTime == other.ProcessingTime ||
                    this.ProcessingTime != null &&
                    this.ProcessingTime.Equals(other.ProcessingTime)
                ) && 
                (
                    this.ImgWidth == other.ImgWidth ||
                    this.ImgWidth != null &&
                    this.ImgWidth.Equals(other.ImgWidth)
                ) && 
                (
                    this.ImgHeight == other.ImgHeight ||
                    this.ImgHeight != null &&
                    this.ImgHeight.Equals(other.ImgHeight)
                ) && 
                (
                    this.CreditCost == other.CreditCost ||
                    this.CreditCost != null &&
                    this.CreditCost.Equals(other.CreditCost)
                ) && 
                (
                    this.CreditsMonthlyUsed == other.CreditsMonthlyUsed ||
                    this.CreditsMonthlyUsed != null &&
                    this.CreditsMonthlyUsed.Equals(other.CreditsMonthlyUsed)
                ) && 
                (
                    this.CreditsMonthlyTotal == other.CreditsMonthlyTotal ||
                    this.CreditsMonthlyTotal != null &&
                    this.CreditsMonthlyTotal.Equals(other.CreditsMonthlyTotal)
                ) && 
                (
                    this.Results == other.Results ||
                    this.Results != null &&
                    this.Results.SequenceEqual(other.Results)
                ) && 
                (
                    this.RegionsOfInterest == other.RegionsOfInterest ||
                    this.RegionsOfInterest != null &&
                    this.RegionsOfInterest.SequenceEqual(other.RegionsOfInterest)
                ) && 
                (
                    this.EpochTime == other.EpochTime ||
                    this.EpochTime != null &&
                    this.EpochTime.Equals(other.EpochTime)
                ) && 
                (
                    this.Version == other.Version ||
                    this.Version != null &&
                    this.Version.Equals(other.Version)
                ) && 
                (
                    this.DataType == other.DataType ||
                    this.DataType != null &&
                    this.DataType.Equals(other.DataType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ProcessingTime != null)
                    hash = hash * 59 + this.ProcessingTime.GetHashCode();
                if (this.ImgWidth != null)
                    hash = hash * 59 + this.ImgWidth.GetHashCode();
                if (this.ImgHeight != null)
                    hash = hash * 59 + this.ImgHeight.GetHashCode();
                if (this.CreditCost != null)
                    hash = hash * 59 + this.CreditCost.GetHashCode();
                if (this.CreditsMonthlyUsed != null)
                    hash = hash * 59 + this.CreditsMonthlyUsed.GetHashCode();
                if (this.CreditsMonthlyTotal != null)
                    hash = hash * 59 + this.CreditsMonthlyTotal.GetHashCode();
                if (this.Results != null)
                    hash = hash * 59 + this.Results.GetHashCode();
                if (this.RegionsOfInterest != null)
                    hash = hash * 59 + this.RegionsOfInterest.GetHashCode();
                if (this.EpochTime != null)
                    hash = hash * 59 + this.EpochTime.GetHashCode();
                if (this.Version != null)
                    hash = hash * 59 + this.Version.GetHashCode();
                if (this.DataType != null)
                    hash = hash * 59 + this.DataType.GetHashCode();
                return hash;
            }
        }
    }

}
