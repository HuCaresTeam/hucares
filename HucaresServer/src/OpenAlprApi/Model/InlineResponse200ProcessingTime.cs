/* 
 * OpenALPR Cloud API
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace OpenAlprApi.Model
{
    /// <summary>
    /// InlineResponse200ProcessingTime
    /// </summary>
    [DataContract]
    public partial class InlineResponse200ProcessingTime :  IEquatable<InlineResponse200ProcessingTime>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse200ProcessingTime" /> class.
        /// </summary>
        /// <param name="Total">Time spent processing all tasks (in milliseconds).</param>
        /// <param name="Plates">Time spent performing license plate recognition (in milliseconds).</param>
        /// <param name="Vehicles">Time spent performing vehicle recognition (in milliseconds).</param>
        public InlineResponse200ProcessingTime(decimal? Total = null, decimal? Plates = null, decimal? Vehicles = null)
        {
            this.Total = Total;
            this.Plates = Plates;
            this.Vehicles = Vehicles;
        }
        
        /// <summary>
        /// Time spent processing all tasks (in milliseconds)
        /// </summary>
        /// <value>Time spent processing all tasks (in milliseconds)</value>
        [DataMember(Name="total", EmitDefaultValue=false)]
        public decimal? Total { get; set; }
        /// <summary>
        /// Time spent performing license plate recognition (in milliseconds)
        /// </summary>
        /// <value>Time spent performing license plate recognition (in milliseconds)</value>
        [DataMember(Name="plates", EmitDefaultValue=false)]
        public decimal? Plates { get; set; }
        /// <summary>
        /// Time spent performing vehicle recognition (in milliseconds)
        /// </summary>
        /// <value>Time spent performing vehicle recognition (in milliseconds)</value>
        [DataMember(Name="vehicles", EmitDefaultValue=false)]
        public decimal? Vehicles { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse200ProcessingTime {\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  Plates: ").Append(Plates).Append("\n");
            sb.Append("  Vehicles: ").Append(Vehicles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as InlineResponse200ProcessingTime);
        }

        /// <summary>
        /// Returns true if InlineResponse200ProcessingTime instances are equal
        /// </summary>
        /// <param name="other">Instance of InlineResponse200ProcessingTime to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse200ProcessingTime other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Total == other.Total ||
                    this.Total != null &&
                    this.Total.Equals(other.Total)
                ) && 
                (
                    this.Plates == other.Plates ||
                    this.Plates != null &&
                    this.Plates.Equals(other.Plates)
                ) && 
                (
                    this.Vehicles == other.Vehicles ||
                    this.Vehicles != null &&
                    this.Vehicles.Equals(other.Vehicles)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Total != null)
                    hash = hash * 59 + this.Total.GetHashCode();
                if (this.Plates != null)
                    hash = hash * 59 + this.Plates.GetHashCode();
                if (this.Vehicles != null)
                    hash = hash * 59 + this.Vehicles.GetHashCode();
                return hash;
            }
        }
    }

}
