/* 
 * OpenALPR Cloud API
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace OpenAlprApi.Model
{
    /// <summary>
    /// PlateDetails
    /// </summary>
    [DataContract]
    public partial class PlateDetails :  IEquatable<PlateDetails>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlateDetails" /> class.
        /// </summary>
        /// <param name="Plate">Best plate number for this plate.</param>
        /// <param name="MatchesTemplate">Indicates whether the plate matched a regional text pattern.</param>
        /// <param name="RequestedTopn">The max number of results requested.</param>
        /// <param name="ProcessingTimeMs">Number of milliseconds to process the license plate.</param>
        /// <param name="Confidence">Confidence percentage that the plate number is correct.</param>
        /// <param name="Region">Specified or detected region (e.g., tx for Texas).</param>
        /// <param name="RegionConfidence">Confidence percentage that the plate region is correct.</param>
        /// <param name="Coordinates">The X/Y coordinates of the license plate in the image Four coordinates are provided that form a polygon starting from the top-left and moving clockwise ending in the bottom left .</param>
        /// <param name="Candidates">All the top N candidates that could be the correct plate number.</param>
        /// <param name="VehicleRegion">VehicleRegion.</param>
        /// <param name="Vehicle">Vehicle.</param>
        public PlateDetails(string Plate = null, int? MatchesTemplate = null, int? RequestedTopn = null, decimal? ProcessingTimeMs = null, decimal? Confidence = null, string Region = null, decimal? RegionConfidence = null, List<Coordinate> Coordinates = null, List<PlateCandidate> Candidates = null, RegionOfInterest VehicleRegion = null, VehicleDetails Vehicle = null)
        {
            this.Plate = Plate;
            this.MatchesTemplate = MatchesTemplate;
            this.RequestedTopn = RequestedTopn;
            this.ProcessingTimeMs = ProcessingTimeMs;
            this.Confidence = Confidence;
            this.Region = Region;
            this.RegionConfidence = RegionConfidence;
            this.Coordinates = Coordinates;
            this.Candidates = Candidates;
            this.VehicleRegion = VehicleRegion;
            this.Vehicle = Vehicle;
        }
        
        /// <summary>
        /// Best plate number for this plate
        /// </summary>
        /// <value>Best plate number for this plate</value>
        [DataMember(Name="plate", EmitDefaultValue=false)]
        public string Plate { get; set; }
        /// <summary>
        /// Indicates whether the plate matched a regional text pattern
        /// </summary>
        /// <value>Indicates whether the plate matched a regional text pattern</value>
        [DataMember(Name="matches_template", EmitDefaultValue=false)]
        public int? MatchesTemplate { get; set; }
        /// <summary>
        /// The max number of results requested
        /// </summary>
        /// <value>The max number of results requested</value>
        [DataMember(Name="requested_topn", EmitDefaultValue=false)]
        public int? RequestedTopn { get; set; }
        /// <summary>
        /// Number of milliseconds to process the license plate
        /// </summary>
        /// <value>Number of milliseconds to process the license plate</value>
        [DataMember(Name="processing_time_ms", EmitDefaultValue=false)]
        public decimal? ProcessingTimeMs { get; set; }
        /// <summary>
        /// Confidence percentage that the plate number is correct
        /// </summary>
        /// <value>Confidence percentage that the plate number is correct</value>
        [DataMember(Name="confidence", EmitDefaultValue=false)]
        public decimal? Confidence { get; set; }
        /// <summary>
        /// Specified or detected region (e.g., tx for Texas)
        /// </summary>
        /// <value>Specified or detected region (e.g., tx for Texas)</value>
        [DataMember(Name="region", EmitDefaultValue=false)]
        public string Region { get; set; }
        /// <summary>
        /// Confidence percentage that the plate region is correct
        /// </summary>
        /// <value>Confidence percentage that the plate region is correct</value>
        [DataMember(Name="region_confidence", EmitDefaultValue=false)]
        public decimal? RegionConfidence { get; set; }
        /// <summary>
        /// The X/Y coordinates of the license plate in the image Four coordinates are provided that form a polygon starting from the top-left and moving clockwise ending in the bottom left 
        /// </summary>
        /// <value>The X/Y coordinates of the license plate in the image Four coordinates are provided that form a polygon starting from the top-left and moving clockwise ending in the bottom left </value>
        [DataMember(Name="coordinates", EmitDefaultValue=false)]
        public List<Coordinate> Coordinates { get; set; }
        /// <summary>
        /// All the top N candidates that could be the correct plate number
        /// </summary>
        /// <value>All the top N candidates that could be the correct plate number</value>
        [DataMember(Name="candidates", EmitDefaultValue=false)]
        public List<PlateCandidate> Candidates { get; set; }
        /// <summary>
        /// Gets or Sets VehicleRegion
        /// </summary>
        [DataMember(Name="vehicle_region", EmitDefaultValue=false)]
        public RegionOfInterest VehicleRegion { get; set; }
        /// <summary>
        /// Gets or Sets Vehicle
        /// </summary>
        [DataMember(Name="vehicle", EmitDefaultValue=false)]
        public VehicleDetails Vehicle { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PlateDetails {\n");
            sb.Append("  Plate: ").Append(Plate).Append("\n");
            sb.Append("  MatchesTemplate: ").Append(MatchesTemplate).Append("\n");
            sb.Append("  RequestedTopn: ").Append(RequestedTopn).Append("\n");
            sb.Append("  ProcessingTimeMs: ").Append(ProcessingTimeMs).Append("\n");
            sb.Append("  Confidence: ").Append(Confidence).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  RegionConfidence: ").Append(RegionConfidence).Append("\n");
            sb.Append("  Coordinates: ").Append(Coordinates).Append("\n");
            sb.Append("  Candidates: ").Append(Candidates).Append("\n");
            sb.Append("  VehicleRegion: ").Append(VehicleRegion).Append("\n");
            sb.Append("  Vehicle: ").Append(Vehicle).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PlateDetails);
        }

        /// <summary>
        /// Returns true if PlateDetails instances are equal
        /// </summary>
        /// <param name="other">Instance of PlateDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlateDetails other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Plate == other.Plate ||
                    this.Plate != null &&
                    this.Plate.Equals(other.Plate)
                ) && 
                (
                    this.MatchesTemplate == other.MatchesTemplate ||
                    this.MatchesTemplate != null &&
                    this.MatchesTemplate.Equals(other.MatchesTemplate)
                ) && 
                (
                    this.RequestedTopn == other.RequestedTopn ||
                    this.RequestedTopn != null &&
                    this.RequestedTopn.Equals(other.RequestedTopn)
                ) && 
                (
                    this.ProcessingTimeMs == other.ProcessingTimeMs ||
                    this.ProcessingTimeMs != null &&
                    this.ProcessingTimeMs.Equals(other.ProcessingTimeMs)
                ) && 
                (
                    this.Confidence == other.Confidence ||
                    this.Confidence != null &&
                    this.Confidence.Equals(other.Confidence)
                ) && 
                (
                    this.Region == other.Region ||
                    this.Region != null &&
                    this.Region.Equals(other.Region)
                ) && 
                (
                    this.RegionConfidence == other.RegionConfidence ||
                    this.RegionConfidence != null &&
                    this.RegionConfidence.Equals(other.RegionConfidence)
                ) && 
                (
                    this.Coordinates == other.Coordinates ||
                    this.Coordinates != null &&
                    this.Coordinates.SequenceEqual(other.Coordinates)
                ) && 
                (
                    this.Candidates == other.Candidates ||
                    this.Candidates != null &&
                    this.Candidates.SequenceEqual(other.Candidates)
                ) && 
                (
                    this.VehicleRegion == other.VehicleRegion ||
                    this.VehicleRegion != null &&
                    this.VehicleRegion.Equals(other.VehicleRegion)
                ) && 
                (
                    this.Vehicle == other.Vehicle ||
                    this.Vehicle != null &&
                    this.Vehicle.Equals(other.Vehicle)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Plate != null)
                    hash = hash * 59 + this.Plate.GetHashCode();
                if (this.MatchesTemplate != null)
                    hash = hash * 59 + this.MatchesTemplate.GetHashCode();
                if (this.RequestedTopn != null)
                    hash = hash * 59 + this.RequestedTopn.GetHashCode();
                if (this.ProcessingTimeMs != null)
                    hash = hash * 59 + this.ProcessingTimeMs.GetHashCode();
                if (this.Confidence != null)
                    hash = hash * 59 + this.Confidence.GetHashCode();
                if (this.Region != null)
                    hash = hash * 59 + this.Region.GetHashCode();
                if (this.RegionConfidence != null)
                    hash = hash * 59 + this.RegionConfidence.GetHashCode();
                if (this.Coordinates != null)
                    hash = hash * 59 + this.Coordinates.GetHashCode();
                if (this.Candidates != null)
                    hash = hash * 59 + this.Candidates.GetHashCode();
                if (this.VehicleRegion != null)
                    hash = hash * 59 + this.VehicleRegion.GetHashCode();
                if (this.Vehicle != null)
                    hash = hash * 59 + this.Vehicle.GetHashCode();
                return hash;
            }
        }
    }

}
